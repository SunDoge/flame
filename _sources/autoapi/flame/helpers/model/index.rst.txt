:py:mod:`flame.helpers.model`
=============================

.. py:module:: flame.helpers.model


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.helpers.model.Model



Functions
~~~~~~~~~

.. autoapisummary::

   flame.helpers.model.create_model
   flame.helpers.model.create_model_from_config



Attributes
~~~~~~~~~~

.. autoapisummary::

   flame.helpers.model._logger


.. py:data:: _logger
   

   

.. py:class:: Model(module)

   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(self, *args, **kwargs)



.. py:function:: create_model(base_model, device, find_unused_parameters = False)

   TODO


.. py:function:: create_model_from_config(config, find_unused_parameters = False)

   TODO: 应该拆分成两个函数


