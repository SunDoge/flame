:py:mod:`flame.pytorch.checkpoint_saver.base_checkpoint_saver`
==============================================================

.. py:module:: flame.pytorch.checkpoint_saver.base_checkpoint_saver


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.checkpoint_saver.base_checkpoint_saver.CheckpointSaver



Functions
~~~~~~~~~

.. autoapisummary::

   flame.pytorch.checkpoint_saver.base_checkpoint_saver.module_to_state_dict
   flame.pytorch.checkpoint_saver.base_checkpoint_saver.module_load_state_dict
   flame.pytorch.checkpoint_saver.base_checkpoint_saver.parallel_module_to_state_dict
   flame.pytorch.checkpoint_saver.base_checkpoint_saver.parallel_module_load_state_dict



Attributes
~~~~~~~~~~

.. autoapisummary::

   flame.pytorch.checkpoint_saver.base_checkpoint_saver._logger
   flame.pytorch.checkpoint_saver.base_checkpoint_saver.ToStateDict
   flame.pytorch.checkpoint_saver.base_checkpoint_saver.LoadStateDict
   flame.pytorch.checkpoint_saver.base_checkpoint_saver.Entry


.. py:data:: _logger
   

   

.. py:data:: ToStateDict
   

   

.. py:data:: LoadStateDict
   

   

.. py:function:: module_to_state_dict(m)


.. py:function:: module_load_state_dict(m, state)


.. py:function:: parallel_module_to_state_dict(m)


.. py:function:: parallel_module_load_state_dict(m, state)


.. py:data:: Entry
   

   

.. py:class:: CheckpointSaver(entries=None)

   .. py:method:: register(self, key, to_state_dict, load_state_dict)


   .. py:method:: state_dict(self)


   .. py:method:: load_state_dict(self, state)


   .. py:method:: save(self, filename)


   .. py:method:: load(self, filename)



