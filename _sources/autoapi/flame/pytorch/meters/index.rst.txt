:py:mod:`flame.pytorch.meters`
==============================

.. py:module:: flame.pytorch.meters


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   average_meter/index.rst
   base_meter/index.rst
   smoothed_value/index.rst
   time_meter/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.meters.AverageMeter
   flame.pytorch.meters.LazyAverageMeterDict
   flame.pytorch.meters.EstimatedTimeOfArrival
   flame.pytorch.meters.Meter




.. py:class:: AverageMeter(name, fmt = ':f', device = _DEFAULT_DEVICE)

   .. py:method:: reset(self)


   .. py:method:: update(self, val, n = 1)


   .. py:method:: avg(self)
      :property:


   .. py:method:: __str__(self)

      Return str(self).


   .. py:method:: sync(self)



.. py:class:: LazyAverageMeterDict(delimiter = '\t', device = _DEFAULT_DEVICE)

   .. py:method:: sync(self, prefix = None)


   .. py:method:: reset(self, prefix = None)


   .. py:method:: save_history(self, epoch = None, prefix = None)


   .. py:method:: named_meters(self, prefix = None)


   .. py:method:: record(self, epoch = None, prefix = None)


   .. py:method:: get(self, name, key = None, fmt = ':f')


   .. py:method:: state_dict(self)


   .. py:method:: load_state_dict(self, state_dict)


   .. py:method:: max(self, key)


   .. py:method:: min(self, key)


   .. py:method:: last(self, key)


   .. py:method:: is_highest(self, key)


   .. py:method:: is_lowest(self, key)


   .. py:method:: __str__(self)

      Return str(self).


   .. py:method:: to_str(self, prefix = None)



.. py:class:: EstimatedTimeOfArrival(total, initial = 0)

   Bases: :py:obj:`flame.pytorch.meters.base_meter.Meter`

   不需要了，定义在reset里面就可以了，vscode可以提示

   .. py:method:: update(self, n = 1)


   .. py:method:: remaining_seconds(self)
      :property:


   .. py:method:: remaining_time(self)
      :property:


   .. py:method:: arrival_time(self)
      :property:


   .. py:method:: elapsed_seconds(self)
      :property:


   .. py:method:: elapsed_time(self)
      :property:


   .. py:method:: remaining(self)
      :property:


   .. py:method:: elapsed(self)
      :property:


   .. py:method:: rate(self)
      :property:


   .. py:method:: reset(self)


   .. py:method:: __str__(self)

      Return str(self).



.. py:class:: Meter

   不需要了，定义在reset里面就可以了，vscode可以提示

   .. py:method:: reset(self)


   .. py:method:: sync(self)


   .. py:method:: __str__(self)

      Return str(self).



