:py:mod:`flame.pytorch.meters.average_meter`
============================================

.. py:module:: flame.pytorch.meters.average_meter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.meters.average_meter.AverageMeter
   flame.pytorch.meters.average_meter.AverageMeterGroup
   flame.pytorch.meters.average_meter.DynamicAverageMeterGroup




Attributes
~~~~~~~~~~

.. autoapisummary::

   flame.pytorch.meters.average_meter._logger


.. py:data:: _logger
   

   

.. py:class:: AverageMeter(name, fmt = ':f')

   Bases: :py:obj:`flame.pytorch.meters.base_meter.Meter`

   不需要了，定义在reset里面就可以了，vscode可以提示

   .. py:method:: reset(self)


   .. py:method:: reset_local(self)


   .. py:method:: update(self, val, n = 1)


   .. py:method:: sync(self)


   .. py:method:: avg(self)
      :property:


   .. py:method:: __str__(self)

      Return str(self).


   .. py:method:: state_dict(self)


   .. py:method:: load_state_dict(self, state)


   .. py:method:: record(self)


   .. py:method:: min(self)


   .. py:method:: max(self)


   .. py:method:: argmin(self)


   .. py:method:: argmax(self)



.. py:class:: AverageMeterGroup(meters, delimiter = '\t')

   Bases: :py:obj:`flame.pytorch.meters.base_meter.Meter`

   不需要了，定义在reset里面就可以了，vscode可以提示

   .. py:method:: update(self, metrics, n = 1)


   .. py:method:: sync(self)


   .. py:method:: reset(self)


   .. py:method:: __str__(self)

      Return str(self).


   .. py:method:: __getitem__(self, key)



.. py:class:: DynamicAverageMeterGroup(delimiter = '\t')

   Bases: :py:obj:`flame.pytorch.meters.base_meter.Meter`

   不需要了，定义在reset里面就可以了，vscode可以提示

   .. py:method:: update(self, name, value, n = 1, fmt = ':f')


   .. py:method:: sync(self)


   .. py:method:: reset(self)


   .. py:method:: __str__(self)

      Return str(self).


   .. py:method:: __getitem__(self, key)


   .. py:method:: state_dict(self)


   .. py:method:: load_state_dict(self, state)


   .. py:method:: record(self)



