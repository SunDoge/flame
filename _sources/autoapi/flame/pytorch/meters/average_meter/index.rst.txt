:py:mod:`flame.pytorch.meters.average_meter`
============================================

.. py:module:: flame.pytorch.meters.average_meter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.meters.average_meter.AverageMeter
   flame.pytorch.meters.average_meter.LazyAverageMeterDict




Attributes
~~~~~~~~~~

.. autoapisummary::

   flame.pytorch.meters.average_meter._logger
   flame.pytorch.meters.average_meter._DEFAULT_DEVICE
   flame.pytorch.meters.average_meter._HistoryRecord


.. py:data:: _logger
   

   

.. py:data:: _DEFAULT_DEVICE
   

   

.. py:data:: _HistoryRecord
   

   

.. py:class:: AverageMeter(name, fmt = ':f', device = _DEFAULT_DEVICE)

   .. py:method:: reset()


   .. py:method:: update(val, n = 1)


   .. py:method:: avg()
      :property:


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: sync()



.. py:class:: LazyAverageMeterDict(delimiter = '\t', device = _DEFAULT_DEVICE)

   .. py:method:: sync(prefix = None)


   .. py:method:: reset(prefix = None)


   .. py:method:: save_history(epoch = None, prefix = None)


   .. py:method:: named_meters(prefix = None)


   .. py:method:: record(epoch = None, prefix = None)


   .. py:method:: get(name, key = None, fmt = ':f')


   .. py:method:: state_dict()


   .. py:method:: load_state_dict(state_dict)


   .. py:method:: max(key)


   .. py:method:: min(key)


   .. py:method:: last(key)


   .. py:method:: is_highest(key)


   .. py:method:: is_lowest(key)


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: to_str(prefix = None)



