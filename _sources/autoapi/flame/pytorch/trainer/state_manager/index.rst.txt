:py:mod:`flame.pytorch.trainer.state_manager`
=============================================

.. py:module:: flame.pytorch.trainer.state_manager


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.trainer.state_manager.Entry
   flame.pytorch.trainer.state_manager.StateManager



Functions
~~~~~~~~~

.. autoapisummary::

   flame.pytorch.trainer.state_manager._default_to_training



Attributes
~~~~~~~~~~

.. autoapisummary::

   flame.pytorch.trainer.state_manager._logger
   flame.pytorch.trainer.state_manager.ToStateDict
   flame.pytorch.trainer.state_manager.LoadStateDict
   flame.pytorch.trainer.state_manager.ToTraining


.. py:data:: _logger
   

   

.. py:data:: ToStateDict
   

   

.. py:data:: LoadStateDict
   

   

.. py:data:: ToTraining
   

   

.. py:function:: _default_to_training(training)


.. py:class:: Entry

   .. py:attribute:: to_state_dict
      :annotation: :ToStateDict

      

   .. py:attribute:: load_state_dict
      :annotation: :LoadStateDict

      

   .. py:attribute:: to_training
      :annotation: :ToTraining

      


.. py:class:: StateManager

   .. py:method:: register(name, to_state_dict, load_state_dict, to_training = _default_to_training)


   .. py:method:: train(mode = True)


   .. py:method:: eval()


   .. py:method:: state_dict()


   .. py:method:: load_state_dict(state_dict)


   .. py:method:: register_model(model, name = 'model', strict = True)


   .. py:method:: register_optimizer(optimizer, name = 'optimizer')


   .. py:method:: register_lr_scheduler(lr_scheduler, name = 'lr_scheduler')


   .. py:method:: register_grad_scaler(grad_scaler, name = 'grad_scaler')


   .. py:method:: __str__()

      Return str(self).


   .. py:method:: resume(checkpoint_path)



