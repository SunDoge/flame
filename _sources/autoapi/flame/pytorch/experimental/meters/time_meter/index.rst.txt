:py:mod:`flame.pytorch.experimental.meters.time_meter`
======================================================

.. py:module:: flame.pytorch.experimental.meters.time_meter


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.experimental.meters.time_meter.ExponentialMovingAverage
   flame.pytorch.experimental.meters.time_meter.EstimatedTimeOfArrival
   flame.pytorch.experimental.meters.time_meter.EpochEta
   flame.pytorch.experimental.meters.time_meter.IterationEta




Attributes
~~~~~~~~~~

.. autoapisummary::

   flame.pytorch.experimental.meters.time_meter._logger


.. py:data:: _logger
   

   

.. py:class:: ExponentialMovingAverage(smoothing = 0.3)

   .. py:method:: __call__(self, x = None)



.. py:class:: EstimatedTimeOfArrival(total = None, initial = 0, prefix = '')

   .. py:method:: update(self, n = 1)


   .. py:method:: remaining_time(self)
      :property:


   .. py:method:: arrival_time(self)
      :property:


   .. py:method:: elapsed_time(self)
      :property:


   .. py:method:: remaining(self)
      :property:


   .. py:method:: elapsed(self)
      :property:


   .. py:method:: rate(self)
      :property:


   .. py:method:: reset(self)


   .. py:method:: __str__(self)

      Return str(self).



.. py:class:: EpochEta(total = None, initial = 0, prefix = '')

   Bases: :py:obj:`EstimatedTimeOfArrival`

   如果有evaluator，必须放在evaluator之后

   .. py:method:: attach(self, engine, prefix = 'Epoch')



.. py:class:: IterationEta(total = None, initial = 0, prefix = '')

   Bases: :py:obj:`EstimatedTimeOfArrival`

   .. py:method:: attach(self, engine, prefix = 'Train')



