:py:mod:`flame.pytorch.utils.spawn`
===================================

.. py:module:: flame.pytorch.utils.spawn


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.utils.spawn.ProcessContext



Functions
~~~~~~~~~

.. autoapisummary::

   flame.pytorch.utils.spawn.start_processes
   flame.pytorch.utils.spawn.spawn



.. py:class:: ProcessContext(processes, error_queues)

   .. py:method:: pids(self)


   .. py:method:: join(self, timeout=None)

      Tries to join one or more processes in this spawn context.
      If one of them exited with a non-zero exit status, this function
      kills the remaining processes and raises an exception with the cause
      of the first process exiting.

      Returns ``True`` if all processes have been joined successfully,
      ``False`` if there are more processes that need to be joined.

      :param timeout: Wait this long before giving up on waiting.
      :type timeout: float



.. py:function:: start_processes(fn, args=(), nprocs=1, join=True, daemon=False, start_method='spawn')


.. py:function:: spawn(fn, args=(), nprocs=1, join=True, daemon=False, start_method='spawn')

   Spawns ``nprocs`` processes that run ``fn`` with ``args``.

   If one of the processes exits with a non-zero exit status, the
   remaining processes are killed and an exception is raised with the
   cause of termination. In the case an exception was caught in the
   child process, it is forwarded and its traceback is included in
   the exception raised in the parent process.

   :param fn: Function is called as the entrypoint of the
              spawned process. This function must be defined at the top
              level of a module so it can be pickled and spawned. This
              is a requirement imposed by multiprocessing.

              The function is called as ``fn(i, *args)``, where ``i`` is
              the process index and ``args`` is the passed through tuple
              of arguments.
   :type fn: function
   :param args: Arguments passed to ``fn``.
   :type args: tuple
   :param nprocs: Number of processes to spawn.
   :type nprocs: int
   :param join: Perform a blocking join on all processes.
   :type join: bool
   :param daemon: The spawned processes' daemon flag. If set to True,
                  daemonic processes will be created.
   :type daemon: bool
   :param start_method: (deprecated) this method will always use ``spawn``
                        as the start method. To use a different start method
                        use ``start_processes()``.
   :type start_method: string

   :returns: None if ``join`` is ``True``,
             :class:`~ProcessContext` if ``join`` is ``False``


