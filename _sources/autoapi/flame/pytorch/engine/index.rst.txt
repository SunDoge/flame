:mod:`flame.pytorch.engine`
===========================

.. py:module:: flame.pytorch.engine


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   flame.pytorch.engine.Engine
   flame.pytorch.engine.A



.. class:: Engine(process_function: Callable, injector: Optional[Injector] = None)


   Bases: :class:`ignite.engine.Engine`

   .. method:: with_engine(process_function_without_engine: Callable) -> Callable
      :staticmethod:

      Helper function


   .. method:: add_event_handler(self, event_name: Any, handler: Callable, *args: Any, **kwargs: Any) -> ignite.engine.RemovableEventHandle

      Add an event handler to be executed when the specified event is fired.

      :param event_name: An event or a list of events to attach the handler. Valid events are
                         from :class:`~ignite.engine.events.Events` or any ``event_name`` added by
                         :meth:`~ignite.engine.engine.Engine.register_events`.
      :param handler: the callable event handler that should be invoked. No restrictions on its signature.
                      The first argument can be optionally `engine`, the :class:`~ignite.engine.engine.Engine` object,
                      handler is bound to.
      :param args: optional args to be passed to ``handler``.
      :param kwargs: optional keyword args to be passed to ``handler``.

      :returns: :class:`~ignite.engine.events.RemovableEventHandle`, which can be used to remove the handler.

      .. note::

         Note that other arguments can be passed to the handler in addition to the `*args` and  `**kwargs`
         passed here, for example during :attr:`~ignite.engine.events.Events.EXCEPTION_RAISED`.

      Example usage:

      .. code-block:: python

          engine = Engine(process_function)

          def print_epoch(engine):
              print(f"Epoch: {engine.state.epoch}")

          engine.add_event_handler(Events.EPOCH_COMPLETED, print_epoch)

          events_list = Events.EPOCH_COMPLETED | Events.COMPLETED

          def execute_something():
              # do some thing not related to engine
              pass

          engine.add_event_handler(events_list, execute_something)

      .. note::

         Since v0.3.0, Events become more flexible and allow to pass an event filter to the Engine.
         See :class:`~ignite.engine.events.Events` for more details.


   .. method:: _fire_event(self, event_name: Any, *event_args: Any, **event_kwargs: Any) -> None

      Execute all the handlers associated with given event.

      This method executes all handlers associated with the event
      `event_name`. Optional positional and keyword arguments can be used to
      pass arguments to **all** handlers added with this event. These
      arguments updates arguments passed using :meth:`~ignite.engine.engine.Engine.add_event_handler`.

      :param event_name: event for which the handlers should be executed. Valid
                         events are from :class:`~ignite.engine.events.Events` or any `event_name` added by
                         :meth:`~ignite.engine.engine.Engine.register_events`.
      :param \*event_args: optional args to be passed to all handlers.
      :param \*\*event_kwargs: optional keyword args to be passed to all handlers.


   .. method:: iter_counter(self)
      :property:

      Get current iter number, 1 base



.. class:: A



